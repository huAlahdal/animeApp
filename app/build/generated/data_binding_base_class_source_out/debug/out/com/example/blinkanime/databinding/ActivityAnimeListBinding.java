// Generated by view binder compiler. Do not edit!
package com.example.blinkanime.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.blinkanime.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAnimeListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final SwipeRefreshLayout animeListRefreshLayout;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final CircularProgressIndicator progressCircular;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final TextInputLayout searchBar;

  @NonNull
  public final TextInputEditText searchBarEditText;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityAnimeListBinding(@NonNull ConstraintLayout rootView,
      @NonNull SwipeRefreshLayout animeListRefreshLayout, @NonNull AppBarLayout appBarLayout,
      @NonNull CircularProgressIndicator progressCircular, @NonNull RecyclerView recyclerView,
      @NonNull TextInputLayout searchBar, @NonNull TextInputEditText searchBarEditText,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.animeListRefreshLayout = animeListRefreshLayout;
    this.appBarLayout = appBarLayout;
    this.progressCircular = progressCircular;
    this.recyclerView = recyclerView;
    this.searchBar = searchBar;
    this.searchBarEditText = searchBarEditText;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAnimeListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAnimeListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_anime_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAnimeListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.animeList_refreshLayout;
      SwipeRefreshLayout animeListRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (animeListRefreshLayout == null) {
        break missingId;
      }

      id = R.id.app_bar_layout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.progress_circular;
      CircularProgressIndicator progressCircular = ViewBindings.findChildViewById(rootView, id);
      if (progressCircular == null) {
        break missingId;
      }

      id = R.id.recycler_view;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.search_bar;
      TextInputLayout searchBar = ViewBindings.findChildViewById(rootView, id);
      if (searchBar == null) {
        break missingId;
      }

      id = R.id.search_bar_edit_text;
      TextInputEditText searchBarEditText = ViewBindings.findChildViewById(rootView, id);
      if (searchBarEditText == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityAnimeListBinding((ConstraintLayout) rootView, animeListRefreshLayout,
          appBarLayout, progressCircular, recyclerView, searchBar, searchBarEditText, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
